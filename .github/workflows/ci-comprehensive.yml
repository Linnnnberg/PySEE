name: Comprehensive CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality Checks
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install isort  # Add isort for import sorting
        pip install -e .

    - name: Black formatting check
      run: |
        echo "::group::Black Formatting Check"
        black --check --diff --line-length=100 pysee/ test_pysee.py example.py
        echo "::endgroup::"

    - name: isort import check
      run: |
        echo "::group::Import Sorting Check"
        isort --check-only --profile=black --line-length=100 pysee/ test_pysee.py example.py
        echo "::endgroup::"

    - name: flake8 linting
      run: |
        echo "::group::Flake8 Linting"
        flake8 pysee/ test_pysee.py example.py --count --max-line-length=100 --extend-ignore=E203,W503,E501,F401 --statistics
        echo "::endgroup::"

    - name: mypy type checking
      run: |
        echo "::group::MyPy Type Checking"
        mypy pysee/ --ignore-missing-imports --no-strict-optional --warn-return-any --no-error-summary
        echo "::endgroup::"

    - name: pydocstyle docstring check
      run: |
        echo "::group::Docstring Style Check"
        pydocstyle pysee/ --convention=google || true
        echo "::endgroup::"

  # Test Suite
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install isort  # Add isort for import sorting
        pip install -e .

    - name: Verify Python version
      run: |
        python --version
        python -c "import sys; print(f'Python {sys.version}')"

    - name: Test with pytest
      run: |
        echo "::group::Running Tests"
        pytest test_pysee.py -v --timeout=60
        pytest tests/ -v --timeout=60 --maxfail=3
        echo "::endgroup::"

    - name: Test example script
      run: |
        echo "::group::Testing Example Script"
        python example.py
        echo "::endgroup::"

  # Build and Package
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        echo "::group::Building Package"
        python -m build
        echo "::endgroup::"

    - name: Check package
      run: |
        echo "::group::Checking Package"
        twine check dist/*
        echo "::endgroup::"

  # Security Scan
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install bandit safety

    - name: Security scan with bandit
      run: |
        echo "::group::Security Scan (Bandit)"
        bandit -r pysee/ -f json -o bandit-report.json || true
        echo "::endgroup::"

    - name: Dependency vulnerability scan
      run: |
        echo "::group::Dependency Vulnerability Scan"
        safety check --json --output safety-report.json || true
        echo "::endgroup::"

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install isort  # Add isort for import sorting
        pip install -e .

    - name: Run performance tests
      run: |
        echo "::group::Performance Tests"
        pytest tests/performance/ -v --timeout=300 --maxfail=1 || true
        echo "::endgroup::"

  # Pre-commit checks
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit on all files
      run: |
        echo "::group::Pre-commit Checks"
        pre-commit run --all-files
        echo "::endgroup::"

  # Summary
  summary:
    runs-on: ubuntu-latest
    needs: [quality, test, build, security, pre-commit]
    if: always()
    steps:
    - name: CI Summary
      run: |
        echo "::group::CI Summary"
        echo "Quality checks: ${{ needs.quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Pre-commit: ${{ needs.pre-commit.result }}"
        echo "::endgroup::"
